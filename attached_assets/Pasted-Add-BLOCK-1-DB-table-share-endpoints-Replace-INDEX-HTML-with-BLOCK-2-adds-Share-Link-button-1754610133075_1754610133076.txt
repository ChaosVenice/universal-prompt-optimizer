Add BLOCK 1 (DB table + share endpoints).

Replace INDEX_HTML with BLOCK 2 (adds “Share Link” buttons for current run + history).

Don’t remove any existing routes. Restart when done.

BLOCK 1 — Backend: share table + endpoints
python
Copy
Edit
# --- SHAREABLE LINKS (add after your other imports/helpers) ---
import secrets, datetime
from flask import Response

def _init_share_table():
    db = get_db()
    db.execute("""CREATE TABLE IF NOT EXISTS shares(
        token TEXT PRIMARY KEY,
        created_at TEXT NOT NULL,
        title TEXT,
        meta_json TEXT NOT NULL,      -- JSON blob of images + params
        expires_at TEXT               -- ISO date or NULL
    )""")
    db.commit()
_init_share_table()

def _new_token(prefix="sh_"): return prefix + secrets.token_urlsafe(16)

@app.post("/share/create")
@require_api_key
def share_create():
    """
    Body: { title?, images: [urls], params: {...}, days_valid?: 30 }
    Returns: { url, token }
    """
    data = request.get_json(force=True)
    images = data.get("images") or []
    params = data.get("params") or {}
    if not images: return jsonify({"error":"No images"}), 400
    days = int(data.get("days_valid", 30))
    token = _new_token()
    payload = {
        "images": images,
        "params": params,
    }
    db = get_db()
    db.execute(
        "INSERT INTO shares(token,created_at,title,meta_json,expires_at) VALUES(?,?,?,?,?)",
        (
            token,
            datetime.datetime.utcnow().isoformat(),
            (data.get("title") or "").strip(),
            json.dumps(payload),
            (datetime.date.today() + datetime.timedelta(days=days)).isoformat()
        )
    )
    db.commit()
    base = os.getenv("PUBLIC_BASE_URL", "")
    url = f"{base}/s/{token}" if base else f"/s/{token}"
    return jsonify({ "ok": True, "url": url, "token": token })

@app.get("/s/<token>")
def share_view(token):
    db = get_db()
    cur = db.execute("SELECT title, meta_json, expires_at, created_at FROM shares WHERE token=?", (token,))
    row = cur.fetchone()
    if not row: return Response("Not found", 404)
    title, meta_json, expires_at, created_at = row
    if expires_at:
        try:
            if datetime.date.fromisoformat(expires_at) < datetime.date.today():
                return Response("Link expired", 410)
        except:
            pass
    try:
        meta = json.loads(meta_json)
    except:
        return Response("Corrupt share data", 500)

    # Simple public HTML (no auth)
    imgs = "".join([f'<img src="{u}" style="max-width:100%;border-radius:10px;border:1px solid #1f2a3a;margin:6px 0">' for u in meta.get("images",[])])
    params = json.dumps(meta.get("params",{}), indent=2)
    ttl = (title or "Shared Generation")
    html = f"""<!doctype html><html><head><meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>{ttl}</title>
<style>
body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;background:#0b0f14;color:#e7edf5;margin:0}}
.wrap{{max-width:900px;margin:36px auto;padding:0 16px}}
.card{{background:#111826;border:1px solid #1f2a3a;border-radius:14px;padding:16px;box-shadow:0 10px 30px rgba(0,0,0,.25);margin-bottom:16px}}
pre{{white-space:pre-wrap;background:#0f141c;border:1px solid #1f2a3a;padding:12px;border-radius:10px;overflow:auto}}
small{{color:#9fb2c7}}
a.btn{{display:inline-block;padding:10px 14px;background:#2f6df6;border-radius:10px;color:#fff;text-decoration:none}}
</style></head><body>
<div class="wrap">
  <h1>{ttl}</h1>
  <div class="card"><small>Created: {created_at} UTC</small></div>
  <div class="card">{imgs}</div>
  <div class="card"><h3>Parameters</h3><pre>{params}</pre></div>
</div></body></html>"""
    return Response(html, 200, mimetype="text/html")

@app.post("/share/delete")
@require_api_key
def share_delete():
    data = request.get_json(force=True)
    token = (data.get("token") or "").strip()
    if not token: return jsonify({"error":"Missing token"}), 400
    db = get_db()
    db.execute("DELETE FROM shares WHERE token=?", (token,))
    db.commit()
    return jsonify({"ok": True})
BLOCK 2 — Frontend: add “Share Link” buttons
Replace your INDEX_HTML with this minimal diff snippet where needed:

In the current SDXL card button row, add a Share Link button.

In each History card, add a Share button.

Add two tiny JS helpers: createShare(meta) and copy(text).

In the SDXL button row (where Generate/ZIP buttons are):

html
Copy
Edit
<button class="secondary" id="genComfyBtn" onclick="generateComfyAsync()">Generate (ComfyUI)</button>
<button class="secondary" id="zipBtn" style="display:none" onclick="downloadZip(LAST_IMAGES)">Download ZIP</button>
<button class="secondary" id="shareBtn" style="display:none" onclick="shareCurrent()">Share Link</button>
In the History card’s buttons (add one more button):

javascript
Copy
Edit
const shareBtn = document.createElement('button');
shareBtn.className = 'secondary';
shareBtn.textContent = 'Share';
shareBtn.onclick = ()=>shareHistory(h);
btns.appendChild(shareBtn);
Add these JS helpers near your other helpers:

html
Copy
Edit
<script>
// copy helper
function copy(text){ navigator.clipboard.writeText(text); alert('Link copied to clipboard'); }

// Create share on server
async function createShare(meta){
  const s = JSON.parse(localStorage.getItem('upo_settings_v1') || '{}');
  if(!s.apiKey){ alert('Enter your API key in Settings.'); return null; }
  const res = await fetch('/share/create', {
    method:'POST',
    headers:{'Content-Type':'application/json','X-API-Key': s.apiKey},
    body: JSON.stringify(meta)
  });
  const out = await res.json();
  if(!res.ok){ alert(out.error || 'Share failed'); return null; }
  return out.url;
}

// Share current run
async function shareCurrent(){
  if(!LAST_IMAGES || !LAST_IMAGES.length){ alert('No images to share'); return; }
  const f = getForm();
  const meta = {
    title: f.idea || 'Shared Generation',
    images: LAST_IMAGES,
    params: {
      steps: f.steps || undefined,
      cfg_scale: f.cfg_scale || undefined,
      sampler: f.sampler || undefined,
      seed: f.seed || undefined,
      batch: f.batch || undefined,
      aspect_ratio: f.aspect_ratio || undefined,
      lighting: f.lighting || undefined,
      color_grade: f.color_grade || undefined,
      extra_tags: f.extra_tags || undefined
    }
  };
  const url = await createShare(meta);
  if(url){ copy(url); }
}

// Share from a history record
async function shareHistory(h){
  const meta = {
    title: h.idea || 'Shared Generation',
    images: h.images || [],
    params: {
      steps: h.steps, cfg_scale: h.cfg_scale, sampler: h.sampler,
      seed: h.seed, batch: h.batch, width: h.width, height: h.height,
      aspect_ratio: h.aspect_ratio, lighting: h.lighting,
      color_grade: h.color_grade, extra_tags: h.extra_tags
    }
  };
  const url = await createShare(meta);
  if(url){ copy(url); }
}
</script>
Enable Share button after a successful generate (where you set zipBtn):

javascript
Copy
Edit
document.getElementById('shareBtn').style.display = LAST_IMAGES.length ? 'inline-block' : 'none';
Hide Share button on new optimize (where you hide zip):

javascript
Copy
Edit
document.getElementById('shareBtn').style.display = 'none';