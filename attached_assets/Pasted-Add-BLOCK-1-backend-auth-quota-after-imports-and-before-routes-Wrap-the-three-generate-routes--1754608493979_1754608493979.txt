Add BLOCK 1 (backend auth + quota) after imports and before routes.

Wrap the three generate routes to require auth (as shown in BLOCK 1).

Replace INDEX_HTML with BLOCK 2 (adds API key field in Settings and shows remaining quota).
Don’t remove other code. Restart when done.

BLOCK 1 — Backend: API key auth + per-day quota (SQLite)
python
Copy
Edit
# --- add near top with other imports ---
import os, sqlite3, datetime
from flask import g

# ENV VARS:
#   VALID_KEYS: comma-separated list of allowed keys, e.g. "demo123,pro456"
#   DAILY_LIMIT: integer, default 50
VALID_KEYS = {k.strip() for k in (os.getenv("VALID_KEYS","demo123").split(","))}
DAILY_LIMIT = int(os.getenv("DAILY_LIMIT","50"))

DB_PATH = os.getenv("USAGE_DB","usage.db")

def get_db():
    if "db" not in g:
        g.db = sqlite3.connect(DB_PATH)
        g.db.execute("""CREATE TABLE IF NOT EXISTS usage (
            key TEXT NOT NULL,
            day TEXT NOT NULL,
            count INTEGER NOT NULL,
            PRIMARY KEY (key, day)
        )""")
    return g.db

@app.teardown_appcontext
def close_db(exc):
    db = g.pop("db", None)
    if db: db.close()

def _today():
    return datetime.date.today().isoformat()

def _get_usage(api_key):
    db = get_db()
    day = _today()
    cur = db.execute("SELECT count FROM usage WHERE key=? AND day=?", (api_key, day))
    row = cur.fetchone()
    return row[0] if row else 0

def _inc_usage(api_key, amt=1):
    db = get_db()
    day = _today()
    cur = db.execute("SELECT count FROM usage WHERE key=? AND day=?", (api_key, day))
    row = cur.fetchone()
    if row:
        newc = row[0] + amt
        db.execute("UPDATE usage SET count=? WHERE key=? AND day=?", (newc, api_key, day))
    else:
        newc = amt
        db.execute("INSERT INTO usage(key,day,count) VALUES(?,?,?)", (api_key, day, newc))
    db.commit()
    return newc

def require_api_key(func):
    from functools import wraps
    @wraps(func)
    def wrapper(*args, **kwargs):
        key = request.headers.get("X-API-Key","").strip() or (request.get_json(silent=True) or {}).get("api_key","")
        if key not in VALID_KEYS:
            return jsonify({"error":"Unauthorized: missing or invalid API key"}), 401
        # store for downstream
        g.api_key = key
        return func(*args, **kwargs)
    return wrapper

@app.get("/auth/check")
def auth_check():
    key = request.headers.get("X-API-Key","").strip()
    if key in VALID_KEYS:
        used = _get_usage(key)
        return jsonify({"ok": True, "limit": DAILY_LIMIT, "used": used, "remaining": max(0, DAILY_LIMIT - used)})
    return jsonify({"ok": False}), 401

# ---- Wrap generate endpoints to enforce quota ----
# Find your existing generate endpoints and wrap them like this:

# @app.post("/generate/comfy")           # OLD
# def generate_comfy(): ...              # OLD
# -> change to:
# @app.post("/generate/comfy")
# @require_api_key
# def generate_comfy(): 
#     # before returning success, increment usage by batch size or 1
#     # after you compute the batch count, call: _inc_usage(g.api_key, batch)

# @app.post("/generate/comfy_async")
# @require_api_key
# def generate_comfy_async(): 
#     # compute 'batch' as you already do
#     used = _get_usage(g.api_key)
#     if used + max(1, int(batch)) > DAILY_LIMIT:
#         return jsonify({"error": "Daily limit reached", "used": used, "limit": DAILY_LIMIT}), 429
#     # queue job as before
#     # IMPORTANT: we charge usage when images complete, but we also soft-reserve here to prevent over-queuing.
#     # For simplicity, we won't reserve; we'll charge on completion in the polling success path.

# In your async completion path (where you detect done and add to history on the client),
# we can’t trust the client to increment. So do it server-side in the status poll “done” branch.
# Easiest: expose a tiny endpoint to “charge” usage. Add this:

@app.post("/usage/charge")
@require_api_key
def usage_charge():
    data = request.get_json(force=True)
    amt = int(data.get("amount", 1))
    used = _get_usage(g.api_key)
    if used + amt > DAILY_LIMIT:
        return jsonify({"error":"Daily limit reached", "used": used, "limit": DAILY_LIMIT}), 429
    newc = _inc_usage(g.api_key, amt)
    return jsonify({"ok": True, "used": newc, "limit": DAILY_LIMIT, "remaining": max(0, DAILY_LIMIT - newc)})

# Also handy for the UI:
@app.get("/usage")
@require_api_key
def usage_get():
    used = _get_usage(g.api_key)
    return jsonify({"limit": DAILY_LIMIT, "used": used, "remaining": max(0, DAILY_LIMIT - used)})
Where to place the usage charge:
If you’re using /generate/comfy_async, have the UI call /usage/charge with amount = batch after images appear (success). If a job is canceled, don’t charge.

BLOCK 2 — New INDEX_HTML (only diffs: API key in Settings + quota display + charge call)
Paste over your current INDEX_HTML. (Everything else stays the same.)

python
Copy
Edit
INDEX_HTML = """
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">
<title>Universal Prompt Optimizer</title>
<style>
/* (styles unchanged) */
*{box-sizing:border-box}body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;background:#0b0f14;color:#e7edf5}
.container{max-width:980px;margin:36px auto;padding:0 16px}
.card{background:#111826;border:1px solid #1f2a3a;border-radius:14px;padding:16px;box-shadow:0 10px 30px rgba(0,0,0,.25);margin-bottom:16px}
h1{margin:0 0 6px;font-size:28px}.sub{margin:0 0 18px;color:#9fb2c7}
label{display:block;font-size:14px;color:#a9bdd4;margin-bottom:6px}
textarea,input,select{width:100%;padding:10px 12px;border-radius:10px;border:1px solid #243447;background:#0f141c;color:#e7edf5}
textarea::placeholder,input::placeholder{color:#627a91}.row{display:flex;gap:12px;margin-top:12px;flex-wrap:wrap}.col{flex:1;min-width:240px}
button{margin-top:10px;padding:10px 14px;background:#2f6df6;border:none;border-radius:10px;color:#fff;font-weight:600;cursor:pointer}
button.secondary{background:#1e293b}button.danger{background:#9b1c1c}
button:hover{filter:brightness(1.05)}.results{margin-top:22px}.hidden{display:none}
.box{background:#0f141c;border:1px solid #1f2a3a;padding:12px;border-radius:10px;white-space:pre-wrap}
.section{margin-top:14px}.rowbtns{display:flex;gap:8px;flex-wrap:wrap}
.kv{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;font-size:12px;color:#bcd0e3}
small,.small{font-size:12px;color:#7f93a7}.badge{display:inline-block;padding:4px 8px;border:1px solid #2d3b4e;border-radius:999px;margin-right:6px;color:#a9bdd4}
footer{margin-top:24px;text-align:center;color:#6f859c;font-size:12px}
h3{margin:8px 0}select, input[type="text"] {height:40px}textarea {min-height:110px}
.modal{position:fixed;inset:0;background:rgba(0,0,0,.6);display:none;align-items:center;justify-content:center;padding:16px}
.modal .inner{background:#0f141c;border:1px solid #223045;border-radius:14px;max-width:720px;width:100%;padding:16px}
.modal .actions{display:flex;gap:10px;justify-content:flex-end;margin-top:10px}
.imgwrap{margin-top:10px;display:flex;gap:12px;flex-wrap:wrap}
.imgwrap img{max-width:320px;border-radius:10px;border:1px solid #1f2a3a}
.thumb{display:flex;flex-direction:column;gap:6px}
.adv{background:#0e1420;border:1px dashed #27405e;border-radius:12px;padding:12px}
.grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(220px,1fr));gap:12px}
.meta{font-family:ui-monospace,monospace;font-size:11px;color:#9fb2c7}
.progress{margin-top:10px;background:#0f141c;border:1px solid #27405e;border-radius:10px;overflow:hidden;height:14px}
.progress .bar{height:100%;width:0%}
.badkey{color:#ff6b6b}
</style>
</head>
<body>
<div class="container">
  <h1>Universal Prompt Optimizer</h1>
  <p class="sub">Turn rough ideas into model-ready prompts for SDXL, ComfyUI, Midjourney, Pika, and Runway. Built for speed + consistency.</p>

  <!-- (inputs, advanced, presets, results, history — unchanged from your current async version) -->
  <!-- ... keep your existing HTML blocks exactly as they are ... -->

  <!-- SETTINGS MODAL -->
  <div class="modal" id="settingsModal">
    <div class="inner">
      <h3>ComfyUI Settings</h3>
      <div class="row">
        <div class="col">
          <label>API Key (required for generation)</label>
          <input id="apiKey" placeholder="enter your key">
          <small id="quotaLine" class="small"></small>
        </div>
      </div>
      <div class="row">
        <div class="col">
          <label>ComfyUI Host (e.g., http://127.0.0.1:8188)</label>
          <input id="comfyHost" placeholder="http://127.0.0.1:8188">
        </div>
      </div>
      <div class="row">
        <div class="col">
          <label>Custom Workflow JSON (optional)</label>
          <textarea id="workflowJson" placeholder='Paste a ComfyUI "workflow_api" JSON here to override defaults'></textarea>
        </div>
      </div>
      <div class="actions">
        <button class="secondary" onclick="closeSettings()">Close</button>
        <button onclick="saveSettings()">Save</button>
      </div>
    </div>
  </div>

<script>
/* JS: only diffs shown; reuse the rest of your existing script */
const LS_SETTINGS='upo_settings_v1'; // {host, workflow, apiKey, limit, remaining}
let LAST_IMAGES=[], POLL=null, CURRENT={host:'',pid:'',expected:1,started:0};

function openSettings(){
  const s = JSON.parse(localStorage.getItem(LS_SETTINGS) || '{}');
  document.getElementById('apiKey').value = s.apiKey || '';
  document.getElementById('comfyHost').value = s.host || '';
  document.getElementById('workflowJson').value = s.workflow || '';
  document.getElementById('quotaLine').textContent = s.limit ? `Quota: ${s.remaining}/${s.limit} remaining today` : '';
  document.getElementById('settingsModal').style.display='flex';
}
function saveSettings(){
  const s = JSON.parse(localStorage.getItem(LS_SETTINGS) || '{}');
  s.apiKey = document.getElementById('apiKey').value.trim();
  s.host   = document.getElementById('comfyHost').value.trim();
  s.workflow = document.getElementById('workflowJson').value.trim();
  localStorage.setItem(LS_SETTINGS, JSON.stringify(s));
  refreshQuota();
  closeSettings();
}

async function refreshQuota(){
  const s = JSON.parse(localStorage.getItem(LS_SETTINGS) || '{}');
  if(!s.apiKey){ setQuotaLine(''); return; }
  try{
    const res = await fetch('/usage', { headers: {'X-API-Key': s.apiKey }});
    const out = await res.json();
    if(res.ok){
      s.limit = out.limit; s.remaining = out.remaining; localStorage.setItem(LS_SETTINGS, JSON.stringify(s));
      setQuotaLine(`Quota: ${out.remaining}/${out.limit} remaining today`);
    } else {
      setQuotaLine('Invalid API key', true);
    }
  }catch(e){ setQuotaLine(''); }
}
function setQuotaLine(text, bad=false){
  const el = document.getElementById('quotaLine');
  el.textContent = text || '';
  el.className = 'small' + (bad ? ' badkey' : '');
}

async function generateComfyAsync(){
  const s=JSON.parse(localStorage.getItem(LS_SETTINGS)||'{}');
  if(!s.host){ alert('Set your ComfyUI host in Settings.'); return; }
  if(!s.apiKey){ alert('Enter your API key in Settings.'); return; }
  let sdxlJson={}; try{ sdxlJson=JSON.parse(document.getElementById('sdxlBox').textContent||'{}'); }catch(e){ alert('Invalid SDXL JSON—click Optimize again.'); return; }
  const f=getForm();
  const advanced={ steps:f.steps, cfg_scale:f.cfg_scale, sampler:f.sampler, seed:f.seed, batch:f.batch };

  // queue job
  const q=await fetch('/generate/comfy_async',{
    method:'POST',
    headers:{'Content-Type':'application/json', 'X-API-Key': s.apiKey},
    body:JSON.stringify({ host:s.host, workflow_override:s.workflow||'', sdxl:sdxlJson, advanced })
  });
  const qo=await q.json();
  if(!q.ok){ alert(qo.error||'Queue failed.'); refreshQuota(); return; }

  CURRENT={ host:s.host, pid:qo.prompt_id, expected:Number(qo.batch||1), started:Date.now() };
  showProgress(); document.getElementById('genImages').innerHTML=''; LAST_IMAGES=[];

  if(POLL) clearInterval(POLL);
  POLL=setInterval(async ()=>{
    const u=`/generate/comfy_status?host=${encodeURIComponent(CURRENT.host)}&pid=${encodeURIComponent(CURRENT.pid)}`;
    const r=await fetch(u); const o=await r.json();
    const imgs=o.images||[];
    const pct=Math.min(100, Math.floor((imgs.length/CURRENT.expected)*100));
    setProgress(pct, `Generating ${imgs.length}/${CURRENT.expected}...`);
    if(imgs.length){
      const wrap=document.getElementById('genImages'); wrap.innerHTML='';
      imgs.forEach(url=>{ const img=document.createElement('img'); img.src=url; wrap.appendChild(img); });
      LAST_IMAGES=imgs; document.getElementById('zipBtn').style.display = LAST_IMAGES.length ? 'inline-block' : 'none';
    }
    if(o.done){
      clearInterval(POLL); POLL=null; setProgress(100,'Done'); setTimeout(hideProgress,800);
      // charge usage = batch
      await fetch('/usage/charge', {
        method:'POST',
        headers:{'Content-Type':'application/json','X-API-Key': s.apiKey},
        body: JSON.stringify({ amount: CURRENT.expected })
      });
      refreshQuota();
      // add to history (same as before) ...
      const settings=sdxlJson.settings||{};
      addHistory({
        ts: Date.now(), images: LAST_IMAGES, seed: qo.seed, batch: CURRENT.expected,
        steps: Number(advanced.steps||settings.steps||30),
        cfg_scale:Number(advanced.cfg_scale||settings.cfg_scale||6.5),
        sampler:(advanced.sampler||settings.sampler||'DPM++ 2M Karras'),
        width:Number(qo.width||settings.width||1024), height:Number(qo.height||settings.height||1024),
        idea: document.getElementById('idea').value.trim(), negative: document.getElementById('negative').value.trim(),
        aspect_ratio: document.getElementById('ar').value, lighting: document.getElementById('lighting').value.trim(),
        color_grade: document.getElementById('color_grade').value.trim(), extra_tags: document.getElementById('extra_tags').value.trim()
      });
    }
  }, 1200);
}

async function cancelGeneration(){
  const s=JSON.parse(localStorage.getItem(LS_SETTINGS)||'{}');
  try{ await fetch('/generate/comfy_cancel',{method:'POST',headers:{'Content-Type':'application/json','X-API-Key': s.apiKey},body:JSON.stringify({prompt_id:CURRENT.pid})}); }catch(e){}
  if(POLL) clearInterval(POLL); POLL=null; setProgress(0,'Canceled'); setTimeout(hideProgress,800);
}

document.addEventListener('DOMContentLoaded', ()=>{ loadAllPresets(); renderHistory(); refreshQuota(); });
</script>
</body></html>
"""